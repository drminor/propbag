<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(SolutionDir)PropBag\bin\Debug\PropBag.dll" #>
<#@ import namespace="DRM.PropBag.XMLModel" #>
<#@ import namespace="DRM.PropBag.ClassGenerator" #>
<#@ output extension=".cs" #>
<#
	//string absolutePath = @"C:\DEV\VS2013Projects\PubPropBag\PropBagT4\TestInput.xml";

	// Remove the .tt and the .props "extensions" from this template's file name.
	string className = PropModelReader.GetClassNameFromTemplateFilename(Path.GetFileName(Host.TemplateFile));
	string defFileName = PropModelReader.GetDefFileName(className);

	//defFileName = "TestNullablePropDefs.xml";

	string path = this.Host.ResolvePath(defFileName);
	PropModel pm = PropModelReader.ReadXml(path);

	pm.ClassName = className;
#>

<#= T4Support.GetNamespaces(pm) #>
namespace <#= pm.Namespace #>
{
	public partial class <#= pm.ClassName #> : <#= T4Support.GetBaseClassName(pm) #>
	{
		public <#= pm.ClassName #>() : this(PropBagTypeSafetyMode.<#= T4Support.GetSafetyModeString(pm) #>, null) { }

		public <#= pm.ClassName #>(PropBagTypeSafetyMode typeSafetyMode) : this(typeSafetyMode, null) { }

		public <#= pm.ClassName #>(PropBagTypeSafetyMode typeSafetyMode, AbstractPropFactory factory) : base(typeSafetyMode, factory)
		{
	<# foreach (PropItem pi in pm.Props) {#>
        <#= T4Support.GetAddPropMethodCallText(pm, pi) #>;
	<#  } #>
	}

	#region Property Declarations
		<# foreach (PropItem pi in pm.Props)  { #>  
		public <#= pi.Type #> <#= pi.Name #>
		{
			get
			{
				return GetIt<<#= pi.Type #>>();
			}
			set
			{
				SetIt<<#= pi.Type #>>(value);
			}
		}  
	<#  } #> 
	#endregion

	#region PropetyChangedWithTVals Event Declarations
		<# foreach (PropItem pi in pm.Props)  { #>  
			public event PropertyChangedWithTValsHandler<<#= pi.Type #>> <#= pi.Name #>Changed
			{
				add
				{
					AddToPropChanged<<#= pi.Type #>>(value);
				}
				remove
				{
					RemoveFromPropChanged<<#= pi.Type #>>(value);
				}
			}
	<#  } #> 
	#endregion

<#= PropModelStaticText.GetGetDelegateMethodText() #>

	} 
}
